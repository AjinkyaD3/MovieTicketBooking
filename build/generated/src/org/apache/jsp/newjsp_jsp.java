package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class newjsp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("  <title></title>\n");
      out.write("  <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("  <meta name=\"robots\" content=\"noindex, nofollow\">\n");
      out.write("  <meta name=\"googlebot\" content=\"noindex, nofollow\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("\n");
      out.write("\n");
      out.write("  <script type=\"text/javascript\" src=\"/js/lib/dummy.js\"></script>\n");
      out.write("\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/result-light.css\">\n");
      out.write("\n");
      out.write("\n");
      out.write("  <style id=\"compiled-css\" type=\"text/css\">\n");
      out.write("    html {\n");
      out.write("  font-size: 62.5%;\n");
      out.write("  box-sizing: border-box;\n");
      out.write("}\n");
      out.write("\n");
      out.write("*, *::before, *::after {\n");
      out.write("  margin: 0;\n");
      out.write("  padding: 0;\n");
      out.write("  box-sizing: inherit;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".calculator {\n");
      out.write("  border: 1px solid #ccc;\n");
      out.write("  border-radius: 5px;\n");
      out.write("  position: absolute;\n");
      out.write("  top: 50%;\n");
      out.write("  left: 50%;\n");
      out.write("  transform: translate(-50%, -50%);\n");
      out.write("  width: 400px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".calculator-screen {\n");
      out.write("  width: 100%;\n");
      out.write("  font-size: 5rem;\n");
      out.write("  height: 80px;\n");
      out.write("  border: none;\n");
      out.write("  background-color: #252525;\n");
      out.write("  color: #fff;\n");
      out.write("  text-align: right;\n");
      out.write("  padding-right: 20px;\n");
      out.write("  padding-left: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("button {\n");
      out.write("  height: 60px;\n");
      out.write("  background-color: #fff;\n");
      out.write("  border-radius: 3px;\n");
      out.write("  border: 1px solid #c4c4c4;\n");
      out.write("  background-color: transparent;\n");
      out.write("  font-size: 2rem;\n");
      out.write("  color: #333;\n");
      out.write("  background-image: linear-gradient(to bottom,transparent,transparent 50%,rgba(0,0,0,.04));\n");
      out.write("  box-shadow: inset 0 0 0 1px rgba(255,255,255,.05), inset 0 1px 0 0 rgba(255,255,255,.45), inset 0 -1px 0 0 rgba(255,255,255,.15), 0 1px 0 0 rgba(255,255,255,.15);\n");
      out.write("  text-shadow: 0 1px rgba(255,255,255,.4);\n");
      out.write("}\n");
      out.write("\n");
      out.write("button:hover {\n");
      out.write("  background-color: #eaeaea;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".operator {\n");
      out.write("  color: #337cac;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".all-clear {\n");
      out.write("  background-color: #f0595f;\n");
      out.write("  border-color: #b0353a;\n");
      out.write("  color: #fff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".all-clear:hover {\n");
      out.write("  background-color: #f17377;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".equal-sign {\n");
      out.write("  background-color: #2e86c0;\n");
      out.write("  border-color: #337cac;\n");
      out.write("  color: #fff;\n");
      out.write("  height: 100%;\n");
      out.write("  grid-area: 2 / 4 / 6 / 5;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".equal-sign:hover {\n");
      out.write("  background-color: #4e9ed4;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".calculator-keys {\n");
      out.write("  display: grid;\n");
      out.write("  grid-template-columns: repeat(4, 1fr);\n");
      out.write("  grid-gap: 20px;\n");
      out.write("  padding: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("    /* EOS */\n");
      out.write("  </style>\n");
      out.write("\n");
      out.write("  <script id=\"insert\"></script>\n");
      out.write("\n");
      out.write("    <script src=\"/js/stringify.js?75212488c4bf51649ad8de7d9ff651e1f5bc54b1\" charset=\"utf-8\"></script>\n");
      out.write("    <script>\n");
      out.write("      const customConsole = (w) => {\n");
      out.write("        const pushToConsole = (payload, type) => {\n");
      out.write("          w.parent.postMessage({\n");
      out.write("            console: {\n");
      out.write("              payload: stringify(payload),\n");
      out.write("              type:    type\n");
      out.write("            }\n");
      out.write("          }, \"*\")\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        w.onerror = (message, url, line, column) => {\n");
      out.write("          // the line needs to correspond with the editor panel\n");
      out.write("          // unfortunately this number needs to be altered every time this view is changed\n");
      out.write("          line = line - 70\n");
      out.write("          if (line < 0){\n");
      out.write("            pushToConsole(message, \"error\")\n");
      out.write("          } else {\n");
      out.write("            pushToConsole(`[");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${line}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write(':');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${column}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write(']');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${message}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("`, \"error\")\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        let console = (function(systemConsole){\n");
      out.write("          return {\n");
      out.write("            log: function(){\n");
      out.write("              let args = Array.from(arguments)\n");
      out.write("              pushToConsole(args, \"log\")\n");
      out.write("              systemConsole.log.apply(this, args)\n");
      out.write("            },\n");
      out.write("            info: function(){\n");
      out.write("              let args = Array.from(arguments)\n");
      out.write("              pushToConsole(args, \"info\")\n");
      out.write("              systemConsole.info.apply(this, args)\n");
      out.write("            },\n");
      out.write("            warn: function(){\n");
      out.write("              let args = Array.from(arguments)\n");
      out.write("              pushToConsole(args, \"warn\")\n");
      out.write("              systemConsole.warn.apply(this, args)\n");
      out.write("            },\n");
      out.write("            error: function(){\n");
      out.write("              let args = Array.from(arguments)\n");
      out.write("              pushToConsole(args, \"error\")\n");
      out.write("              systemConsole.error.apply(this, args)\n");
      out.write("            },\n");
      out.write("            system: function(arg){\n");
      out.write("              pushToConsole(arg, \"system\")\n");
      out.write("            },\n");
      out.write("            clear: function(){\n");
      out.write("              systemConsole.clear.apply(this, {})\n");
      out.write("            },\n");
      out.write("            time: function(){\n");
      out.write("              let args = Array.from(arguments)\n");
      out.write("              systemConsole.time.apply(this, args)\n");
      out.write("            },\n");
      out.write("            assert: function(assertion, label){\n");
      out.write("              if (!assertion){\n");
      out.write("                pushToConsole(label, \"log\")\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              let args = Array.from(arguments)\n");
      out.write("              systemConsole.assert.apply(this, args)\n");
      out.write("            }\n");
      out.write("          }\n");
      out.write("        }(window.console))\n");
      out.write("\n");
      out.write("        window.console = { ...window.console, ...console }\n");
      out.write("\n");
      out.write("        console.system(\"Running fiddle\")\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      if (window.parent){\n");
      out.write("        customConsole(window)\n");
      out.write("      }\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"calculator\">\n");
      out.write("\n");
      out.write("  <input type=\"text\" class=\"calculator-screen\" value=\"\" disabled=\"\" title=\"overall type: UNKNOWN_TYPE\n");
      out.write("server type: NO_SERVER_DATA\n");
      out.write("heuristic type: UNKNOWN_TYPE\n");
      out.write("label: \n");
      out.write("parseable name: \n");
      out.write("section: layout_0_2\n");
      out.write("field signature: 1318412689\n");
      out.write("form signature: 18397864225076835361\n");
      out.write("form signature in host form: 7320408267157660261\n");
      out.write("field frame token: FD02FF17F03E8D04DA69C2F9BEDB3C99\n");
      out.write("form renderer id: 0\n");
      out.write("field renderer id: 40\n");
      out.write("visible: false\n");
      out.write("focusable: false\n");
      out.write("field rank: 47\n");
      out.write("field rank in signature group: 1\n");
      out.write("field rank in host form: 0\n");
      out.write("field rank in host form signature group: 0\" autofill-information=\"overall type: UNKNOWN_TYPE\n");
      out.write("server type: NO_SERVER_DATA\n");
      out.write("heuristic type: UNKNOWN_TYPE\n");
      out.write("label: \n");
      out.write("parseable name: \n");
      out.write("section: layout_0_2\n");
      out.write("field signature: 1318412689\n");
      out.write("form signature: 18397864225076835361\n");
      out.write("form signature in host form: 7320408267157660261\n");
      out.write("field frame token: FD02FF17F03E8D04DA69C2F9BEDB3C99\n");
      out.write("form renderer id: 0\n");
      out.write("field renderer id: 40\n");
      out.write("visible: false\n");
      out.write("focusable: false\n");
      out.write("field rank: 47\n");
      out.write("field rank in signature group: 1\n");
      out.write("field rank in host form: 0\n");
      out.write("field rank in host form signature group: 0\" autofill-prediction=\"UNKNOWN_TYPE\">\n");
      out.write("  \n");
      out.write("  <div class=\"calculator-keys\">\n");
      out.write("    \n");
      out.write("    <button type=\"button\" class=\"operator\" value=\"+\">+</button>\n");
      out.write("    <button type=\"button\" class=\"operator\" value=\"-\">-</button>\n");
      out.write("    <button type=\"button\" class=\"operator\" value=\"*\">×</button>\n");
      out.write("    <button type=\"button\" class=\"operator\" value=\"/\">÷</button>\n");
      out.write("\n");
      out.write("    <button type=\"button\" value=\"7\">7</button>\n");
      out.write("    <button type=\"button\" value=\"8\">8</button>\n");
      out.write("    <button type=\"button\" value=\"9\">9</button>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <button type=\"button\" value=\"4\">4</button>\n");
      out.write("    <button type=\"button\" value=\"5\">5</button>\n");
      out.write("    <button type=\"button\" value=\"6\">6</button>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <button type=\"button\" value=\"1\">1</button>\n");
      out.write("    <button type=\"button\" value=\"2\">2</button>\n");
      out.write("    <button type=\"button\" value=\"3\">3</button>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <button type=\"button\" value=\"0\">0</button>\n");
      out.write("    <button type=\"button\" class=\"decimal\" value=\".\">.</button>\n");
      out.write("    <button type=\"button\" class=\"all-clear\" value=\"all-clear\">AC</button>\n");
      out.write("\n");
      out.write("    <button type=\"button\" class=\"equal-sign operator\" value=\"=\">=</button>\n");
      out.write("\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">//<![CDATA[\n");
      out.write("\n");
      out.write("\n");
      out.write("const calculator = {\n");
      out.write("  displayValue: '0',\n");
      out.write("  firstOperand: null,\n");
      out.write("  waitingForSecondOperand: false,\n");
      out.write("  operator: null,\n");
      out.write("};\n");
      out.write("\n");
      out.write("function inputDigit(digit) {\n");
      out.write("  const { displayValue, waitingForSecondOperand } = calculator;\n");
      out.write("\n");
      out.write("  if (waitingForSecondOperand === true) {\n");
      out.write("    calculator.displayValue = digit;\n");
      out.write("    calculator.waitingForSecondOperand = false;\n");
      out.write("  } else {\n");
      out.write("    calculator.displayValue = displayValue === '0' ? digit : displayValue + digit;\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function inputDecimal(dot) {\n");
      out.write("  if (calculator.waitingForSecondOperand === true) {\n");
      out.write("  \tcalculator.displayValue = \"0.\"\n");
      out.write("    calculator.waitingForSecondOperand = false;\n");
      out.write("    return\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  if (!calculator.displayValue.includes(dot)) {\n");
      out.write("    calculator.displayValue += dot;\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function handleOperator(nextOperator) {\n");
      out.write("  const { firstOperand, displayValue, operator } = calculator\n");
      out.write("  const inputValue = parseFloat(displayValue);\n");
      out.write("  \n");
      out.write("  if (operator && calculator.waitingForSecondOperand)  {\n");
      out.write("    calculator.operator = nextOperator;\n");
      out.write("    return;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("\n");
      out.write("  if (firstOperand == null && !isNaN(inputValue)) {\n");
      out.write("    calculator.firstOperand = inputValue;\n");
      out.write("  } else if (operator) {\n");
      out.write("    const result = calculate(firstOperand, inputValue, operator);\n");
      out.write("\n");
      out.write("    calculator.displayValue = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${parseFloat(result.toFixed(7))}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("`;\n");
      out.write("    calculator.firstOperand = result;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  calculator.waitingForSecondOperand = true;\n");
      out.write("  calculator.operator = nextOperator;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function calculate(firstOperand, secondOperand, operator) {\n");
      out.write("  if (operator === '+') {\n");
      out.write("    return firstOperand + secondOperand;\n");
      out.write("  } else if (operator === '-') {\n");
      out.write("    return firstOperand - secondOperand;\n");
      out.write("  } else if (operator === '*') {\n");
      out.write("    return firstOperand * secondOperand;\n");
      out.write("  } else if (operator === '/') {\n");
      out.write("    return firstOperand / secondOperand;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  return secondOperand;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function resetCalculator() {\n");
      out.write("  calculator.displayValue = '0';\n");
      out.write("  calculator.firstOperand = null;\n");
      out.write("  calculator.waitingForSecondOperand = false;\n");
      out.write("  calculator.operator = null;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function updateDisplay() {\n");
      out.write("  const display = document.querySelector('.calculator-screen');\n");
      out.write("  display.value = calculator.displayValue;\n");
      out.write("}\n");
      out.write("\n");
      out.write("updateDisplay();\n");
      out.write("\n");
      out.write("const keys = document.querySelector('.calculator-keys');\n");
      out.write("keys.addEventListener('click', event => {\n");
      out.write("  const { target } = event;\n");
      out.write("  const { value } = target;\n");
      out.write("  if (!target.matches('button')) {\n");
      out.write("    return;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  switch (value) {\n");
      out.write("    case '+':\n");
      out.write("    case '-':\n");
      out.write("    case '*':\n");
      out.write("    case '/':\n");
      out.write("    case '=':\n");
      out.write("      handleOperator(value);\n");
      out.write("      break;\n");
      out.write("    case '.':\n");
      out.write("      inputDecimal(value);\n");
      out.write("      break;\n");
      out.write("    case 'all-clear':\n");
      out.write("      resetCalculator();\n");
      out.write("      break;\n");
      out.write("    default:\n");
      out.write("      if (Number.isInteger(parseFloat(value))) {\n");
      out.write("        inputDigit(value);\n");
      out.write("      }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  updateDisplay();\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("  //]]></script>\n");
      out.write("\n");
      out.write("  <script>\n");
      out.write("    // tell the embed parent frame the height of the content\n");
      out.write("    if (window.parent && window.parent.parent){\n");
      out.write("      window.parent.parent.postMessage([\"resultsFrame\", {\n");
      out.write("        height: document.body.getBoundingClientRect().height,\n");
      out.write("        slug: \"\"\n");
      out.write("      }], \"*\")\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // always overwrite window.name, in case users try to set it manually\n");
      out.write("    window.name = \"result\"\n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("      let allLines = []\n");
      out.write("\n");
      out.write("      window.addEventListener(\"message\", (message) => {\n");
      out.write("        if (message.data.console){\n");
      out.write("          let insert = document.querySelector(\"#insert\")\n");
      out.write("          allLines.push(message.data.console.payload)\n");
      out.write("          insert.innerHTML = allLines.join(\";\\r\")\n");
      out.write("\n");
      out.write("          let result = eval.call(null, message.data.console.payload)\n");
      out.write("          if (result !== undefined){\n");
      out.write("            console.log(result)\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body></html>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
